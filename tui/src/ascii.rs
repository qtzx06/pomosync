use ratatui::{
    buffer::Buffer,
    layout::Rect,
    widgets::{Paragraph, Widget},
};

pub const FONT_HEIGHT: usize = 6;
pub const LETTER_SPACING: usize = 1;

fn get_char(ch: char) -> Option<[&'static str; FONT_HEIGHT]> {
    match ch {
        'A' | 'a' => Some([
            " █████╗  ",
            "██╔══██╗ ",
            "███████║ ",
            "██╔══██║ ",
            "██║  ██║ ",
            "╚═╝  ╚═╝ ",
        ]),
        'B' | 'b' => Some([
            "██████╗  ",
            "██╔══██╗ ",
            "██████╔╝ ",
            "██╔══██╗ ",
            "██████╔╝ ",
            "╚═════╝  ",
        ]),
        'C' | 'c' => Some([
            " ██████╗ ",
            "██╔════╝ ",
            "██║      ",
            "██║      ",
            "╚██████╗ ",
            " ╚═════╝ ",
        ]),
        'D' | 'd' => Some([
            "██████╗  ",
            "██╔══██╗ ",
            "██║  ██║ ",
            "██║  ██║ ",
            "██████╔╝ ",
            "╚═════╝  ",
        ]),
        'E' | 'e' => Some([
            "███████╗ ",
            "██╔════╝ ",
            "█████╗   ",
            "██╔══╝   ",
            "███████╗ ",
            "╚══════╝ ",
        ]),
        'F' | 'f' => Some([
            "███████╗ ",
            "██╔════╝ ",
            "█████╗   ",
            "██╔══╝   ",
            "██║      ",
            "╚═╝      ",
        ]),
        'G' | 'g' => Some([
            " ██████╗ ",
            "██╔════╝ ",
            "██║  ███╗",
            "██║   ██║",
            "╚██████╔╝",
            " ╚═════╝ ",
        ]),
        'H' | 'h' => Some([
            "██╗  ██╗ ",
            "██║  ██║ ",
            "███████║ ",
            "██╔══██║ ",
            "██║  ██║ ",
            "╚═╝  ╚═╝ ",
        ]),
        'I' | 'i' => Some([
            "██╗ ",
            "██║ ",
            "██║ ",
            "██║ ",
            "██║ ",
            "╚═╝ ",
        ]),
        'J' | 'j' => Some([
            "     ██╗ ",
            "     ██║ ",
            "     ██║ ",
            "██   ██║ ",
            "╚█████╔╝ ",
            " ╚════╝  ",
        ]),
        'K' | 'k' => Some([
            "██╗  ██╗ ",
            "██║ ██╔╝ ",
            "█████╔╝  ",
            "██╔═██╗  ",
            "██║  ██╗ ",
            "╚═╝  ╚═╝ ",
        ]),
        'L' | 'l' => Some([
            "██╗      ",
            "██║      ",
            "██║      ",
            "██║      ",
            "███████╗ ",
            "╚══════╝ ",
        ]),
        'M' | 'm' => Some([
            "███╗   ███╗",
            "████╗ ████║",
            "██╔████╔██║",
            "██║╚██╔╝██║",
            "██║ ╚═╝ ██║",
            "╚═╝     ╚═╝",
        ]),
        'N' | 'n' => Some([
            "███╗   ██╗",
            "████╗  ██║",
            "██╔██╗ ██║",
            "██║╚██╗██║",
            "██║ ╚████║",
            "╚═╝  ╚═══╝",
        ]),
        'O' | 'o' => Some([
            " ██████╗ ",
            "██╔═══██╗",
            "██║   ██║",
            "██║   ██║",
            "╚██████╔╝",
            " ╚═════╝ ",
        ]),
        'P' | 'p' => Some([
            "██████╗  ",
            "██╔══██╗ ",
            "██████╔╝ ",
            "██╔═══╝  ",
            "██║      ",
            "╚═╝      ",
        ]),
        'Q' | 'q' => Some([
            " ██████╗ ",
            "██╔═══██╗",
            "██║   ██║",
            "██║▄▄ ██║",
            "╚██████╔╝",
            " ╚══▀▀═╝ ",
        ]),
        'R' | 'r' => Some([
            "██████╗  ",
            "██╔══██╗ ",
            "██████╔╝ ",
            "██╔══██╗ ",
            "██║  ██║ ",
            "╚═╝  ╚═╝ ",
        ]),
        'S' | 's' => Some([
            "███████╗ ",
            "██╔════╝ ",
            "███████╗ ",
            "╚════██║ ",
            "███████║ ",
            "╚══════╝ ",
        ]),
        'T' | 't' => Some([
            "████████╗",
            "╚══██╔══╝",
            "   ██║   ",
            "   ██║   ",
            "   ██║   ",
            "   ╚═╝   ",
        ]),
        'U' | 'u' => Some([
            "██╗   ██╗",
            "██║   ██║",
            "██║   ██║",
            "██║   ██║",
            "╚██████╔╝",
            " ╚═════╝ ",
        ]),
        'V' | 'v' => Some([
            "██╗   ██╗",
            "██║   ██║",
            "██║   ██║",
            "╚██╗ ██╔╝",
            " ╚████╔╝ ",
            "  ╚═══╝  ",
        ]),
        'W' | 'w' => Some([
            "██╗    ██╗",
            "██║    ██║",
            "██║ █╗ ██║",
            "██║███╗██║",
            "╚███╔███╔╝",
            " ╚══╝╚══╝ ",
        ]),
        'X' | 'x' => Some([
            "██╗  ██╗ ",
            "╚██╗██╔╝ ",
            " ╚███╔╝  ",
            " ██╔██╗  ",
            "██╔╝ ██╗ ",
            "╚═╝  ╚═╝ ",
        ]),
        'Y' | 'y' => Some([
            "██╗   ██╗",
            "╚██╗ ██╔╝",
            " ╚████╔╝ ",
            "  ╚██╔╝  ",
            "   ██║   ",
            "   ╚═╝   ",
        ]),
        'Z' | 'z' => Some([
            "███████╗ ",
            "╚══███╔╝ ",
            "  ███╔╝  ",
            " ███╔╝   ",
            "███████╗ ",
            "╚══════╝ ",
        ]),
        '0' => Some([
            " ██████╗ ",
            "██╔═████╗",
            "██║██╔██║",
            "████╔╝██║",
            "╚██████╔╝",
            " ╚═════╝ ",
        ]),
        '1' => Some([
            "  ██╗    ",
            " ███║    ",
            " ╚██║    ",
            "  ██║    ",
            "  ██║    ",
            "  ╚═╝    ",
        ]),
        '2' => Some([
            "██████╗  ",
            "╚════██╗ ",
            " █████╔╝ ",
            "██╔═══╝  ",
            "███████╗ ",
            "╚══════╝ ",
        ]),
        '3' => Some([
            "██████╗  ",
            "╚════██╗ ",
            " █████╔╝ ",
            " ╚═══██╗ ",
            "██████╔╝ ",
            "╚═════╝  ",
        ]),
        '4' => Some([
            "██╗  ██╗ ",
            "██║  ██║ ",
            "███████║ ",
            "╚════██║ ",
            "     ██║ ",
            "     ╚═╝ ",
        ]),
        '5' => Some([
            "███████╗ ",
            "██╔════╝ ",
            "███████╗ ",
            "╚════██║ ",
            "███████║ ",
            "╚══════╝ ",
        ]),
        '6' => Some([
            " ██████╗ ",
            "██╔════╝ ",
            "███████╗ ",
            "██╔═══██╗",
            "╚██████╔╝",
            " ╚═════╝ ",
        ]),
        '7' => Some([
            "███████╗ ",
            "╚════██║ ",
            "    ██╔╝ ",
            "   ██╔╝  ",
            "   ██║   ",
            "   ╚═╝   ",
        ]),
        '8' => Some([
            " █████╗  ",
            "██╔══██╗ ",
            "╚█████╔╝ ",
            "██╔══██╗ ",
            "╚█████╔╝ ",
            " ╚════╝  ",
        ]),
        '9' => Some([
            " █████╗  ",
            "██╔══██╗ ",
            "╚██████║ ",
            " ╚═══██║ ",
            " █████╔╝ ",
            " ╚════╝  ",
        ]),
        ':' => Some([
            "    ",
            "██╗ ",
            "╚═╝ ",
            "██╗ ",
            "╚═╝ ",
            "    ",
        ]),
        _ => None,
    }
}

fn get_char_width(ch: char) -> usize {
    if let Some(lines) = get_char(ch) {
        lines[0].chars().count()
    } else {
        0
    }
}

pub fn get_text_width(text: &str) -> usize {
    let char_count = text.chars().count();
    if char_count == 0 {
        return 0;
    }
    let total_width: usize = text.chars().map(get_char_width).sum();
    let total_spacing = (char_count - 1) * LETTER_SPACING;
    total_width + total_spacing
}

pub fn render_time(area: Rect, buf: &mut Buffer, time_str: &str) {
    render_text(area, buf, time_str);
}

pub fn render_text(area: Rect, buf: &mut Buffer, text: &str) {
    let text_width = get_text_width(text);
    if area.width < text_width as u16 {
        return;
    }

    let mut current_x = area.x + (area.width - text_width as u16) / 2;
    let start_y = area.y + (area.height - FONT_HEIGHT as u16) / 2;

    for ch in text.chars() {
        if let Some(char_lines) = get_char(ch) {
            let char_width = get_char_width(ch);
            for (line_idx, line) in char_lines.iter().enumerate() {
                let y = start_y + line_idx as u16;
                Paragraph::new(*line).render(
                    Rect {
                        x: current_x,
                        y,
                        width: line.chars().count() as u16,
                        height: 1,
                    },
                    buf,
                );
            }
            current_x += (char_width + LETTER_SPACING) as u16;
        }
    }
}
